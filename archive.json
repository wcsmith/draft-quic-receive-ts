{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-05-22T01:46:31.549543+00:00",
  "repo": "wcsmith/draft-quic-receive-ts",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOGIUVps4-YZT7",
      "title": "Should Timestamps have to be in order?",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/issues/2",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently timestamps must decrease in value as the packet numbers decrease in value, so if a packet with a lower packet number is received after a packet with a higher packet number, that timestamp can't be expressed in the frame.\r\n\r\nFor existing CC algorithms which use timestamps, it's believed this is ok, but it'd be good to confirm that design decision.",
      "createdAt": "2021-11-06T19:42:08Z",
      "updatedAt": "2025-04-12T17:00:47Z",
      "closedAt": "2025-04-12T17:00:46Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "@jbeshay proposed a way to do this at IETF 118: https://datatracker.ietf.org/meeting/118/materials/slides-118-quic-ack-timestamps-00.pdf\n\nSo far, there's substantial support for this, so I think it's worth writing a PR.",
          "createdAt": "2025-03-19T08:51:09Z",
          "updatedAt": "2025-03-19T08:51:09Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, @sharadjaiswal gave that presentation and he had added it to the mvfst implementation. We'll work on a PR to update the draft soon. ",
          "createdAt": "2025-03-19T18:14:44Z",
          "updatedAt": "2025-03-19T18:14:44Z"
        },
        {
          "author": "chris-box",
          "authorAssociation": "NONE",
          "body": "Thumbs up for the above. I'd like to see this happen due to the routine layer 2 reordering described by https://gwhitecl.github.io/draft-white-intarea-reordering/draft-white-intarea-reordering.html. Widespread adoption of support for out-of-order timestamps is then an enabler for layer 2s to be less aggressive with imposing transmission delays while they put packets back in the original sequence.",
          "createdAt": "2025-03-28T17:15:12Z",
          "updatedAt": "2025-03-28T17:15:12Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "This was fixed by #15 ",
          "createdAt": "2025-04-12T17:00:46Z",
          "updatedAt": "2025-04-12T17:00:46Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOGIUVps5PWaMm",
      "title": "Is this draft aborted?",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/issues/3",
      "state": "CLOSED",
      "author": "MrJia1997",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi there, I wonder if this draft is aborted, since the current revision has expired. If yes, then what's the reason?",
      "createdAt": "2022-08-08T03:29:30Z",
      "updatedAt": "2025-03-02T20:11:02Z",
      "closedAt": "2025-03-02T20:11:02Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "This is being used by a Google internal project, but it's not actively being worked on besides that.  Christian also has a timestamp draft that has not been adopted, and it's unclear to me what the working group wants to do about timestamps.\r\n\r\nIs this something you're using or would like to use?",
          "createdAt": "2022-08-08T16:01:39Z",
          "updatedAt": "2022-08-08T16:01:39Z"
        },
        {
          "author": "MrJia1997",
          "authorAssociation": "NONE",
          "body": "Yeah. I'm trying to optimize CC algorithm for QUIC, and one-way delay measurement will enable me a better queueing and jitter detection. I've checked out Christian's draft too, but, IMHO, the encoding efficiency of TIMESTAMP frame doesn't look really good, since only one receive timestamp is carried per ack frame. Though handling reordered packets might be tough in this draft, it looks more promising for me to encode packet timestamps in a much more compact way.",
          "createdAt": "2022-08-08T16:37:30Z",
          "updatedAt": "2022-08-08T16:37:30Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "This draft now has a new author, and there's renewed interest, so activity should resume and hopefully we'll get it adopted by the QUIC WG in the near future.",
          "createdAt": "2025-03-02T20:10:44Z",
          "updatedAt": "2025-03-02T20:10:44Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOGIUVps6sYVnI",
      "title": "Extended ACK frame with multiple optional fields vs. new ACK frame types for the different supported configurations?",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/issues/7",
      "state": "CLOSED",
      "author": "jbeshay",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Rather than adding two frame types to support receive timestamps with and without ECN counts, the latest iteration of the draft defines one frame type, ACK_EXTENDED, that can carry multiple optional sets of fields that correspond to different features.\n\nPro:\nOnly one frame is needed to support the different combinations of all supported ack-related features or versions of them. Without the extended ack frame, supporting different combinations of all the supported features/versions would require an exponentially increasing number of frames as new features are introduced. Or at least linearly, if each new feature/version introduces a frame that includes the union of all existing features.\n\nCon:\nThe ack extended frame contains a field whose bit-wise values indicate which features/versions of features are included in the frame. This requires a new IANA registry to track which bits maps to which features. If the number of ack-related features is small, the overhead of having an IANA registry will be higher than the additional frame types. There are only three sets of optional fields defined or proposed that I am aware of: ECN counts (rfc9000), receive timestamps (this draft), and timestamps for one way delay (https://datatracker.ietf.org/doc/draft-huitema-quic-ts/)\n\nDoes avoiding the potential of increasing frame types justify the IANA overhead? Do we expect to see more extensions that add ACK fields? \n\nDepending on the discussion, we can: \n1. Maintain the ACK_EXTENDED frame approach that can supports this and future extensions.\n2. Use separate ACK_RECEIVE_TIMESTAMPS and ACK_ECN_RECEIVETIMESTAMPS frames to carry the two additional combinations of features we currently need. \n2. Use one ACK_RECEIVE_TIMESTAMPS frame that can optionally carry the ECN counts and/or receive timestamps fields, without being extensible to new features, to avoid the IANA overhead.",
      "createdAt": "2025-03-03T19:03:00Z",
      "updatedAt": "2025-04-22T19:35:12Z",
      "closedAt": "2025-04-22T19:35:12Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "Use different frame types, as I said at the mic in Bangkok.\n\nTimestamps make the ACK quite a bit more verbose, so I think the price of using a 2B frame type is relatively small, if we're at all concerned about using so many frame types < 63. Though I'd be fine with a 1B frame type as well.",
          "createdAt": "2025-03-24T22:28:17Z",
          "updatedAt": "2025-03-24T22:28:17Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "This is intertwined with https://github.com/wcsmith/draft-quic-receive-ts/issues/12 as well.\n\nUsing new frame types for ACK_RECEIVE_TIMESTAMPS will avoid the complexity of an extensible ACK but would require explicitly defining PATH_ACK_RECEIVE_TIMESTAMPS frames for MP-QUIC.",
          "createdAt": "2025-04-08T22:16:39Z",
          "updatedAt": "2025-04-08T22:17:03Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOGIUVps6xMrj0",
      "title": "Write Security Considerations",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/issues/9",
      "state": "OPEN",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently a TODO\n\nCould a peer exploit a bug in the peer's congestion controller?",
      "createdAt": "2025-04-04T16:35:50Z",
      "updatedAt": "2025-04-04T16:35:50Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDOGIUVps6xM7ay",
      "title": "Ensure format is compatible with MP-QUIC",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/issues/12",
      "state": "OPEN",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Could also non-normatively reference the RFC and specifically detail what the framing is when this extension is used with MP-QUIC.",
      "createdAt": "2025-04-04T17:06:56Z",
      "updatedAt": "2025-04-25T22:36:44Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this is mostly fixed, but maybe we should add an explicit reference to MP-QUIC?",
          "createdAt": "2025-04-25T22:36:44Z",
          "updatedAt": "2025-04-25T22:36:44Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOGIUVps6xzfC1",
      "title": "Caution against making the ACK frame 'too large'",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/issues/14",
      "state": "OPEN",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For example, one might want to ensure the addition of an ACK frame doesn't cause a whole extra packet to be sent, so it might be good to send fewer than the max allowed number of timestamps in that case?",
      "createdAt": "2025-04-09T14:45:34Z",
      "updatedAt": "2025-04-09T14:45:34Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 19,
      "id": "I_kwDOGIUVps63ozkn",
      "title": "Decide how multiple ACK Frame extensions coexist",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/issues/19",
      "state": "OPEN",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#17 proposes an approach for how the extensions might exist, but it might not be specific enough and/or handle all the cases we want.\n\nThis is a placeholder issue to ensure the WG has a more complete conversation about this question once the draft it adopted.",
      "createdAt": "2025-05-21T17:16:05Z",
      "updatedAt": "2025-05-21T17:16:05Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOGIUVps4sd4RB",
      "title": "Add first draft of quic-receive-ts.",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/1",
      "state": "MERGED",
      "author": "wcsmith",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-09-29T18:17:01Z",
      "updatedAt": "2021-10-24T21:00:18Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "594d208dfe440ade8877341d6a2423aea0d731c6",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "firstdraft",
      "headRefOid": "c35a7ae55655d6c5ae0aedd444f610b51e30e5a2",
      "closedAt": "2021-10-24T21:00:18Z",
      "mergedAt": "2021-10-24T21:00:18Z",
      "mergedBy": "wcsmith",
      "mergeCommit": {
        "oid": "7c46f57af75d21bc087d19aa760922de40c5a018"
      },
      "comments": [
        {
          "author": "wcsmith",
          "authorAssociation": "OWNER",
          "body": "Ready for review",
          "createdAt": "2021-10-23T22:35:57Z",
          "updatedAt": "2021-10-23T22:35:57Z"
        },
        {
          "author": "wcsmith",
          "authorAssociation": "OWNER",
          "body": "> One small suggestion, but LG.\r\n> \r\n> You're right, my other comment was stale. I almost completed a review a few weeks ago and apparently never sent it :(\r\n\r\nSorry I also realized too late that I probably shouldn't have forced pushed an update to a PR :).",
          "createdAt": "2021-10-24T20:59:08Z",
          "updatedAt": "2021-10-24T20:59:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps4u743O",
          "commit": {
            "abbreviatedOid": "801a062"
          },
          "author": "wcsmith",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-23T22:39:16Z",
          "updatedAt": "2021-10-23T22:39:16Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "Does it make sense to drop the wrapping 32-bit epoch for the initial timestamp delta? The interaction with the exponent is a little weird; e.g. if you have exponent = 0, you'll dip into eight-byte deltas occasionally anyway (with the 2 bit varint addition). I noticed that Christian's timestamp doesn't do this, so wondering if you think it still makes sense now that we have varint and a timestamp exponent.",
              "createdAt": "2021-10-23T22:39:16Z",
              "updatedAt": "2021-10-23T22:39:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps4tunhv",
          "commit": {
            "abbreviatedOid": "91b46ba"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Some quick comments, but looks great.",
          "createdAt": "2021-09-29T21:14:26Z",
          "updatedAt": "2021-10-24T19:46:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nsupport for reporting multiple packet receive timestamps in QUIC ACK frames.\r\n```",
              "createdAt": "2021-09-29T21:14:26Z",
              "updatedAt": "2021-10-24T19:46:37Z"
            },
            {
              "originalPosition": 32,
              "body": "As discussed, my suggestion would be to make this something like:\r\n - send_timestamp_exponent = varint\r\n - max_received_timestamps = varint",
              "createdAt": "2021-09-29T21:16:06Z",
              "updatedAt": "2021-10-24T19:46:37Z"
            },
            {
              "originalPosition": 46,
              "body": "```suggestion\r\n```",
              "createdAt": "2021-09-29T21:16:52Z",
              "updatedAt": "2021-10-24T19:46:38Z"
            },
            {
              "originalPosition": 95,
              "body": "I'm not sure I understand this format completely, could you add some more detail and/or more descriptive names?",
              "createdAt": "2021-09-29T21:19:17Z",
              "updatedAt": "2021-10-24T19:46:38Z"
            },
            {
              "originalPosition": 165,
              "body": "I'd be inclined to drop the wrapping.",
              "createdAt": "2021-10-24T19:46:15Z",
              "updatedAt": "2021-10-24T19:46:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps4u8Qgv",
          "commit": {
            "abbreviatedOid": "8c210da"
          },
          "author": "wcsmith",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T20:05:24Z",
          "updatedAt": "2021-10-24T20:05:25Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I think these were from a much earlier version (maybe you started this comment a while ago?). I am looking at: https://wcsmith.github.io/draft-quic-receive-ts/firstdraft/draft-smith-quic-receive-ts.html . Let me know if it doesn't appear updated.",
              "createdAt": "2021-10-24T20:05:24Z",
              "updatedAt": "2021-10-24T20:05:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps4u8Qg-",
          "commit": {
            "abbreviatedOid": "8c210da"
          },
          "author": "wcsmith",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T20:05:30Z",
          "updatedAt": "2021-10-24T20:05:30Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Same outdated",
              "createdAt": "2021-10-24T20:05:30Z",
              "updatedAt": "2021-10-24T20:05:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps4u8Qsp",
          "commit": {
            "abbreviatedOid": "dada0c2"
          },
          "author": "wcsmith",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T20:14:25Z",
          "updatedAt": "2021-10-24T20:14:26Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "If this is for the current version: yes, I can definitely clarify. Can you check if you were commenting on the up-to-date version though? As I added descriptions for all fields, more explanation, etc.",
              "createdAt": "2021-10-24T20:14:26Z",
              "updatedAt": "2021-10-24T20:14:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps4u8Qx2",
          "commit": {
            "abbreviatedOid": "dada0c2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "One small suggestion, but LG.\r\n\r\nYou're right, my other comment was stale.  I almost completed a review a few weeks ago and apparently never sent it :(",
          "createdAt": "2021-10-24T20:18:26Z",
          "updatedAt": "2021-10-24T20:20:11Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "It seems like these are in descending order, correct?  If so, I'd say that here.",
              "createdAt": "2021-10-24T20:18:27Z",
              "updatedAt": "2021-10-24T20:20:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps4u8Q0M",
          "commit": {
            "abbreviatedOid": "dada0c2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-24T20:20:21Z",
          "updatedAt": "2021-10-24T20:20:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGIUVps4u8RHE",
          "commit": {
            "abbreviatedOid": "a4912aa"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for the extra text!",
          "createdAt": "2021-10-24T20:35:30Z",
          "updatedAt": "2021-10-24T20:37:08Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nin descending sequential packet number (and descending timestamp) order. Timestamp Ranges\r\n```",
              "createdAt": "2021-10-24T20:35:30Z",
              "updatedAt": "2021-10-24T20:37:08Z"
            },
            {
              "originalPosition": 14,
              "body": "This LG for now, but I expect this design choice to get some discussion.",
              "createdAt": "2021-10-24T20:36:57Z",
              "updatedAt": "2021-10-24T20:37:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps4u8RLH",
          "commit": {
            "abbreviatedOid": "c35a7ae"
          },
          "author": "wcsmith",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T20:38:41Z",
          "updatedAt": "2021-10-24T20:38:41Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Ack. Totally open to discussion (this was just modeled on the current behavior).",
              "createdAt": "2021-10-24T20:38:41Z",
              "updatedAt": "2021-10-24T20:38:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOGIUVps6M30sq",
      "title": "Expand the draft with a new ACK_EXTENDED frame that is more extensible and add new authors",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/4",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The existing ACK_RECEIVE_TIMESTAMP cannot carry ECN counts. Rather than adding more frame types for combinations of ack features, this PR uses a new frame type ACK_EXTENDED that can carry multiple sets of optional fields; ECN fields and receive timestamps fields in this draft.\r\n\r\nThis also adds new authors who have been using and extending the design of the proposal in the draft.",
      "createdAt": "2025-02-28T00:30:54Z",
      "updatedAt": "2025-03-03T19:19:01Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "9f349a17af2b54adffd93cd6f6992e05186a5c96",
      "headRepository": "jbeshay/draft-quic-receive-ts",
      "headRefName": "ack_extended",
      "headRefOid": "36c4f7cc433f1b3b72f12798085424ec692277ce",
      "closedAt": "2025-03-03T19:18:54Z",
      "mergedAt": "2025-03-03T19:18:54Z",
      "mergedBy": "jbeshay",
      "mergeCommit": {
        "oid": "17df80d4e8a589dc394f08679e6c6f025d44bd7f"
      },
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased on top of template updates.",
          "createdAt": "2025-02-28T22:39:17Z",
          "updatedAt": "2025-02-28T22:39:17Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed offline, the added complexity of negotiating the supported features and the need for an IANA registry may not be justified given that we don't expect many ack-related extensions that would need to be used concurrently. \r\n\r\nOne way to avoid the IANA requirement is to have one frame that can optionally carry receive timestamp and/or ecn counts but does not extend to other features.\r\n\r\nI will merge this change and continue the discussion about the best way to support the combination of ack-related features in a separate github issue (https://github.com/wcsmith/draft-quic-receive-ts/issues/7).",
          "createdAt": "2025-03-03T19:12:43Z",
          "updatedAt": "2025-03-03T19:12:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6eETsr",
          "commit": {
            "abbreviatedOid": "5b15dd9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Mostly LG, though I'm not convinced this is a good way to go for extending the ACK frame.",
          "createdAt": "2025-02-28T23:06:36Z",
          "updatedAt": "2025-03-01T03:14:28Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I'm fine with adding everyone for now, but this is a lot of authors, so if it gets adopted, I suspect some people might be moved to the acknowledgements.",
              "createdAt": "2025-02-28T23:06:36Z",
              "updatedAt": "2025-03-01T03:14:28Z"
            },
            {
              "originalPosition": 177,
              "body": "```suggestion\r\nExtended Ack Features: A variable-length integer whose bit-wise\r\n```",
              "createdAt": "2025-02-28T23:12:35Z",
              "updatedAt": "2025-03-01T03:14:28Z"
            },
            {
              "originalPosition": 217,
              "body": "```suggestion\r\n  receive ACK_EXTENDED frames with the specified set of features. The bit-wise\r\n```",
              "createdAt": "2025-03-01T03:11:51Z",
              "updatedAt": "2025-03-01T03:14:28Z"
            },
            {
              "originalPosition": 221,
              "body": "if we go this direction, we'll likely need an IANA registry for this, which is somewhat annoying.",
              "createdAt": "2025-03-01T03:12:45Z",
              "updatedAt": "2025-03-01T03:14:28Z"
            },
            {
              "originalPosition": 277,
              "body": "```suggestion\r\nendpoints and to make the field more compact.\r\n```",
              "createdAt": "2025-03-01T03:13:59Z",
              "updatedAt": "2025-03-01T03:14:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOGIUVps6M_l0m",
      "title": "Update Github template",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/5",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Updates template using\r\n```\r\nmake update\r\nmake update-files\r\n```",
      "createdAt": "2025-02-28T22:29:45Z",
      "updatedAt": "2025-02-28T22:33:04Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "4c353af6ee2dbc9edbce73ec27ac241c386cad61",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "jb/update_template",
      "headRefOid": "ffaedb2c715135a315c555e142e915184ea3de9f",
      "closedAt": "2025-02-28T22:33:03Z",
      "mergedAt": "2025-02-28T22:33:03Z",
      "mergedBy": "jbeshay",
      "mergeCommit": {
        "oid": "9f349a17af2b54adffd93cd6f6992e05186a5c96"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOGIUVps6M_slU",
      "title": "Update Connor Smith's org affiliation to NVIDIA.",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/6",
      "state": "MERGED",
      "author": "wcsmith",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-28T22:56:04Z",
      "updatedAt": "2025-02-28T23:28:46Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "9f349a17af2b54adffd93cd6f6992e05186a5c96",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "wcsmith/update-author",
      "headRefOid": "3691219fd4b2d1959f9b94c8b5d7b51dc65ab472",
      "closedAt": "2025-02-28T23:28:45Z",
      "mergedAt": "2025-02-28T23:28:45Z",
      "mergedBy": "wcsmith",
      "mergeCommit": {
        "oid": "9c78fbace87032d57e75e403675bd1f453a21009"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6eESf4",
          "commit": {
            "abbreviatedOid": "3691219"
          },
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-28T23:00:52Z",
          "updatedAt": "2025-02-28T23:00:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOGIUVps6PKC-L",
      "title": "Always send timestamps once negotiated",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/8",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This approach does not require any new frame types and if for some reason the timestamp extension is negotiated and never used, only wastes one byte per ACK frame.\r\n\r\nCloses #7",
      "createdAt": "2025-03-18T18:24:12Z",
      "updatedAt": "2025-04-22T19:49:35Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "17df80d4e8a589dc394f08679e6c6f025d44bd7f",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "ianswett-always-send-timestamps",
      "headRefOid": "a1c17599d358c343ea10a2cf277ba0981ec02262",
      "closedAt": "2025-04-22T19:35:11Z",
      "mergedAt": "2025-04-22T19:35:11Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "10354dbbb1edc6e2a37c7befc142f7ec35c84e89"
      },
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "If we're not going with the extended acks, I prefer using a separate frame. \r\n\r\nAdding new fields to the end of the existing ACKs is only practical for one extension. Any other extension that wants to use the same approach will have to refer to the receive timestamps fields in order to define the order in which the fields from the different extensions must appear in the ACK if both extensions are enabled. Which is the essence of the problem the extended ack tried to solve.",
          "createdAt": "2025-04-16T23:31:37Z",
          "updatedAt": "2025-04-16T23:31:37Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "> I don't see how this would be negotiated safely. How can one endpoint be sure that the extra field is present or not? Especially for ACK frames in Initial or Handshake?\r\n\r\nThe intent is that this is only sent in 1-RTT (it's useless in 0-RTT packets I believe?) packets, so I'll try to clarify that.  As with any extension that uses a new frame codepoint or changes an existing frame, it's definitely not safe in Initial or Handshake packets.",
          "createdAt": "2025-04-20T23:08:29Z",
          "updatedAt": "2025-04-20T23:08:29Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I updated the PR to address Martin's concern.  Please interpret the commit comment as 1-RTT only, not 0-RTT only.",
          "createdAt": "2025-04-20T23:19:13Z",
          "updatedAt": "2025-04-20T23:19:13Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "NONE",
          "body": "@jbeshay @ianswett can we merge this PR, cut a new draft, and then we'll highlight that fact on the adoption call to make it clear we are proposing adopting with the change?",
          "createdAt": "2025-04-21T23:45:09Z",
          "updatedAt": "2025-04-21T23:45:09Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "> @jbeshay @ianswett can we merge this PR, cut a new draft, and then we'll highlight that fact on the adoption call to make it clear we are proposing adopting with the change?\r\n\r\nMerged and published a new draft: https://datatracker.ietf.org/doc/draft-smith-quic-receive-ts/",
          "createdAt": "2025-04-22T19:49:34Z",
          "updatedAt": "2025-04-22T19:49:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6grvpO",
          "commit": {
            "abbreviatedOid": "752adb9"
          },
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-18T18:31:41Z",
          "updatedAt": "2025-03-18T18:32:38Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "We'd need to define this for ACK and ACK_ECN separately for their different frame types.",
              "createdAt": "2025-03-18T18:31:42Z",
              "updatedAt": "2025-03-18T18:32:38Z"
            },
            {
              "originalPosition": 59,
              "body": "For the ACK_ECN frame, to maintain the existing field order, I think it'd be better to have ReceiveTimestamps at the end of the frame.",
              "createdAt": "2025-03-18T18:32:33Z",
              "updatedAt": "2025-03-18T18:32:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6gr7y1",
          "commit": {
            "abbreviatedOid": "1eafb78"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-18T18:46:46Z",
          "updatedAt": "2025-03-18T18:46:46Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I was trying to model RFC9000, but yes we should ensure that's clear.",
              "createdAt": "2025-03-18T18:46:46Z",
              "updatedAt": "2025-03-18T18:46:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6gr-xR",
          "commit": {
            "abbreviatedOid": "752adb9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-18T18:49:28Z",
          "updatedAt": "2025-03-18T18:49:29Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I'm fine with that as well.",
              "createdAt": "2025-03-18T18:49:28Z",
              "updatedAt": "2025-03-18T18:49:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6gwi0-",
          "commit": {
            "abbreviatedOid": "752adb9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-19T06:35:44Z",
          "updatedAt": "2025-03-19T06:35:44Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I exactly copied from RFC9000 now.  I'll note that RFC9000 doesn't actually use the name ACK_ECN, and instead both codepoints are called ACK.",
              "createdAt": "2025-03-19T06:35:44Z",
              "updatedAt": "2025-03-19T06:35:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6gwi-Q",
          "commit": {
            "abbreviatedOid": "752adb9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-19T06:35:53Z",
          "updatedAt": "2025-03-19T06:35:53Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Done",
              "createdAt": "2025-03-19T06:35:53Z",
              "updatedAt": "2025-03-19T06:35:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6ltPXf",
          "commit": {
            "abbreviatedOid": "a6656aa"
          },
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "I don't see how this would be negotiated safely.  How can one endpoint be sure that the extra field is present or not?  Especially for ACK frames in Initial or Handshake?",
          "createdAt": "2025-04-19T22:01:48Z",
          "updatedAt": "2025-04-19T22:01:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGIUVps6l-b8h",
          "commit": {
            "abbreviatedOid": "a1c1759"
          },
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-22T16:00:23Z",
          "updatedAt": "2025-04-22T16:00:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 10,
      "id": "PR_kwDOGIUVps6RcBHf",
      "title": "Why timestamps are relative to a basis?",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/10",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes a TODO",
      "createdAt": "2025-04-04T16:57:31Z",
      "updatedAt": "2025-04-07T18:43:35Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "17df80d4e8a589dc394f08679e6c6f025d44bd7f",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "ianswett-timestamp-basis",
      "headRefOid": "ad98241f7b80d886111e634d9be506c4362a656c",
      "closedAt": "2025-04-07T18:43:33Z",
      "mergedAt": "2025-04-07T18:43:33Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "4a80821b0a72e046851cb0dcec40fa804af6cd3a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6jwszU",
          "commit": {
            "abbreviatedOid": "ad98241"
          },
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-07T16:36:53Z",
          "updatedAt": "2025-04-07T16:36:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOGIUVps6RcFFZ",
      "title": "Useful for Network telemetry too",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/11",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Reflects a few of the comments at the most recent IETF QUIC session.",
      "createdAt": "2025-04-04T17:04:19Z",
      "updatedAt": "2025-04-07T18:43:52Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "17df80d4e8a589dc394f08679e6c6f025d44bd7f",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "ianswett-telemetry",
      "headRefOid": "8c3b28ea666eaa355ab841f324bd6e4e41a2c14a",
      "closedAt": "2025-04-07T18:43:50Z",
      "mergedAt": "2025-04-07T18:43:50Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "84e2f0d3af7841f72e2270f8ee0e3dd19dff7ff7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6jwsj0",
          "commit": {
            "abbreviatedOid": "8c3b28e"
          },
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-07T16:36:29Z",
          "updatedAt": "2025-04-07T16:36:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "PR_kwDOGIUVps6R2soo",
      "title": "Update frame format to support receive timestamps for out of order packets",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/13",
      "state": "CLOSED",
      "author": "jbeshay",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses https://github.com/wcsmith/draft-quic-receive-ts/issues/2",
      "createdAt": "2025-04-08T22:02:44Z",
      "updatedAt": "2025-04-12T17:00:10Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "84e2f0d3af7841f72e2270f8ee0e3dd19dff7ff7",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "jb/reordering",
      "headRefOid": "5d194a9008d3ae421e77b3a9b6c454e29a5fa04a",
      "closedAt": "2025-04-12T17:00:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @sharadjaiswal",
          "createdAt": "2025-04-08T22:03:54Z",
          "updatedAt": "2025-04-08T22:03:54Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "As we discussed on yesterday's call, I think it'd be better if we can express any type of reordering.  I believe the most efficient way to do so is each group of timestamps has a packet number delta relative to largest_acked and then all timestamps are in monotonicly decreasing order.  Basically this serializes the receive timestamps in reverse order of how the packets were received.  Give we expect the acknowledged packets to be relatively close to largest_acked, the packet number delta should almost always be a single byte.",
          "createdAt": "2025-04-10T18:07:08Z",
          "updatedAt": "2025-04-10T18:07:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6kJXAT",
          "commit": {
            "abbreviatedOid": "97d0e39"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-09T15:33:38Z",
          "updatedAt": "2025-04-09T15:33:38Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nbut grows exponentially with more sets of optional fields.\r\n```",
              "createdAt": "2025-04-09T15:33:38Z",
              "updatedAt": "2025-04-09T15:33:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6kJZDI",
          "commit": {
            "abbreviatedOid": "5d194a9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I'm having a difficult time figuring out how adding the first two fields enables reporting out of order receive timestamps, but maybe I need to think about it more?  Or maybe an example would help.",
          "createdAt": "2025-04-09T15:35:28Z",
          "updatedAt": "2025-04-09T15:42:53Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "I would think this should be relative to the largest acked?",
              "createdAt": "2025-04-09T15:35:28Z",
              "updatedAt": "2025-04-09T15:42:53Z"
            },
            {
              "originalPosition": 54,
              "body": "Putting this after the first two fields basically means you always report at least one timestamp.  I think that's a reasonable design, but maybe worth pointing out?",
              "createdAt": "2025-04-09T15:37:23Z",
              "updatedAt": "2025-04-09T15:42:53Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\nThe frame allows for reporting receive timestamps for packets received\r\n```",
              "createdAt": "2025-04-09T15:38:11Z",
              "updatedAt": "2025-04-09T15:42:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOGIUVps6SJRWM",
      "title": "Allow ranges to be out of packet number order",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/15",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Enables expressing packet reordering.\r\n\r\nFixes #13",
      "createdAt": "2025-04-10T18:20:31Z",
      "updatedAt": "2025-04-12T17:00:10Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "84e2f0d3af7841f72e2270f8ee0e3dd19dff7ff7",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "ianswett-reordering-tweak",
      "headRefOid": "b00ac59a8155dd04058026e11a4f36f5ad1a6007",
      "closedAt": "2025-04-12T17:00:09Z",
      "mergedAt": "2025-04-12T17:00:09Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "7e32bdedd0540400588e3cdc377e658dd57e192d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6kZqqI",
          "commit": {
            "abbreviatedOid": "54e1c10"
          },
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-10T19:46:27Z",
          "updatedAt": "2025-04-10T19:46:28Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "This solves the problem of representing out of order packet numbers but it doesn't not solve representing the timestamps. The timestamp delta basis in each range cannot be the largest acknowledged timestamp because that would be negative for out of order packets.\r\n\r\nI think what we need is similar to this but with fields for latest_received_packet number and timestamp that would act as the basis for both the packet number gaps and the timestamp delta. @sharadjaiswal and I will update https://github.com/wcsmith/draft-quic-receive-ts/pull/13 with that shortly.",
              "createdAt": "2025-04-10T19:46:27Z",
              "updatedAt": "2025-04-10T19:46:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6kaY-6",
          "commit": {
            "abbreviatedOid": "54e1c10"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-10T20:53:36Z",
          "updatedAt": "2025-04-10T20:53:37Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "I think it works, but maybe I'm missing something?",
              "createdAt": "2025-04-10T20:53:37Z",
              "updatedAt": "2025-04-10T20:53:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6kbONx",
          "commit": {
            "abbreviatedOid": "54e1c10"
          },
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks good. I can follow up with an example in a subsequent PR so it's easier to understand the description.",
          "createdAt": "2025-04-10T22:25:25Z",
          "updatedAt": "2025-04-10T22:27:21Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "This clarifies my earlier confusion.\r\n\r\n```suggestion\r\nTimestamp Range (descending). Packets within a range are in descending\r\npacket number and timestamp order. Ranges are in descending timestamp order but do not have to be in descending packet number order.\r\n```",
              "createdAt": "2025-04-10T22:25:25Z",
              "updatedAt": "2025-04-10T22:27:21Z"
            },
            {
              "originalPosition": 25,
              "body": "You're right. We worked through an example and it does work. ",
              "createdAt": "2025-04-10T22:25:45Z",
              "updatedAt": "2025-04-10T22:27:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOGIUVps6S6T8L",
      "title": "Go back to separate frame types instead of extended ack",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/16",
      "state": "CLOSED",
      "author": "jbeshay",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Revert back to separate frame type for ACK_RECEIVE_TIMESTAMPS\r\n- Add note on using this extension along with the multipath extension\r\n- Add an example to illustrate the frame format and its support for reordering\r\n\r\nAddresses https://github.com/wcsmith/draft-quic-receive-ts/issues/7 and  https://github.com/wcsmith/draft-quic-receive-ts/issues/12",
      "createdAt": "2025-04-16T23:26:13Z",
      "updatedAt": "2025-04-22T21:57:43Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "7e32bdedd0540400588e3cdc377e658dd57e192d",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "jb_newframes_not_extended",
      "headRefOid": "5aa1df8b35c83ab3d311eb544c5b986bfd8966ef",
      "closedAt": "2025-04-22T21:52:36Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I also think it's easier to just always include the receive timestamp section in 1-RTT packets once negotiated.  If you asked for timestamps, you'd typically expect to receive at least 1, so there would be no byte overhead for always including it.",
          "createdAt": "2025-04-16T23:45:07Z",
          "updatedAt": "2025-04-16T23:45:07Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "The problem I mentioned on https://github.com/wcsmith/draft-quic-receive-ts/pull/8 still stands though. Enabling multiple extensions in the same ACK requires some sort of coordination. In case of MPQUIC and this extension, MPQUIC adds the new PathID field before the LargestAcked packet number, and receive timestamps adds its fields at the end of the frame.\r\n\r\nThis approach is limited by anchor points in the existing ACK frame. No two extensions can use the same anchor point to add their fields, otherwise their order would be ambiguous if used together.",
          "createdAt": "2025-04-16T23:51:42Z",
          "updatedAt": "2025-04-16T23:51:42Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "> The problem I mentioned on #8 still stands though. Enabling multiple extensions in the same ACK requires some sort of coordination. In case of MPQUIC and this extension, MPQUIC adds the new PathID field before the LargestAcked packet number, and receive timestamps adds its fields at the end of the frame.\r\n> \r\n> This approach is limited by anchor points in the existing ACK frame. No two extensions can use the same anchor point to add their fields, otherwise their order would be ambiguous if used together.\r\n\r\nBut the coordination can be trivial given the relatively small number of changes to the ACK frame.  For example, we could say that extensions that are negotiated be in RFC# order.",
          "createdAt": "2025-04-17T00:59:40Z",
          "updatedAt": "2025-04-17T00:59:40Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "> But the coordination can be trivial given the relatively small number of changes to the ACK frame. For example, we could say that extensions that are negotiated be in RFC# order.\r\n\r\nThat works. Let's update https://github.com/wcsmith/draft-quic-receive-ts/pull/8 with some text about this idea and I will rebase my MP QUIC note and the example on top of it.",
          "createdAt": "2025-04-17T01:26:37Z",
          "updatedAt": "2025-04-17T01:26:37Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "Abandon in favor of https://github.com/wcsmith/draft-quic-receive-ts/pull/8 and https://github.com/wcsmith/draft-quic-receive-ts/pull/18",
          "createdAt": "2025-04-22T21:52:36Z",
          "updatedAt": "2025-04-22T21:52:36Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6lWdUt",
          "commit": {
            "abbreviatedOid": "5aa1df8"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "If you're doing Multipath, aren't you always sort of doing it and keeping the existing ACK frame seems odd?  I guess I can leave that as feedback on MP-QUIC",
          "createdAt": "2025-04-16T23:39:08Z",
          "updatedAt": "2025-04-16T23:41:02Z",
          "comments": [
            {
              "originalPosition": 221,
              "body": "I liked this PR until I read this section.  I guess this is more of a comment on MPQUIC, but why not just always include the Path Identifier in 1-RTT ACKs if you've negotiated the extension?",
              "createdAt": "2025-04-16T23:39:08Z",
              "updatedAt": "2025-04-16T23:41:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOGIUVps6TfMla",
      "title": "Propose how multiple ACK Frame extensions coexist",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/17",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on comments on the QUIC mailing list.",
      "createdAt": "2025-04-22T19:58:51Z",
      "updatedAt": "2025-05-21T17:16:34Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "10354dbbb1edc6e2a37c7befc142f7ec35c84e89",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "ianswett-multiple-extensions",
      "headRefOid": "829e845d740218d439377ed1fa3697a5fb9df2a8",
      "closedAt": "2025-05-21T17:16:32Z",
      "mergedAt": "2025-05-21T17:16:32Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "0a8fef7d0092957da41774e80d7f95a63d287308"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Landing this for now.  I opened #19 as a place for further discussion.",
          "createdAt": "2025-05-21T17:16:30Z",
          "updatedAt": "2025-05-21T17:16:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6mBFrY",
          "commit": {
            "abbreviatedOid": "6e6a99e"
          },
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm thanks for adding this",
          "createdAt": "2025-04-22T20:33:52Z",
          "updatedAt": "2025-04-22T20:33:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGIUVps6mSiBK",
          "commit": {
            "abbreviatedOid": "6e6a99e"
          },
          "author": "larseggert",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-24T06:32:45Z",
          "updatedAt": "2025-04-24T06:32:46Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "\"Order by RFC number\" makes it a bit difficult to implement things during the I-D phase, but I guess the I-Ds could specify a (temporary) order.",
              "createdAt": "2025-04-24T06:32:46Z",
              "updatedAt": "2025-04-24T06:32:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6mTrjc",
          "commit": {
            "abbreviatedOid": "6e6a99e"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-24T08:15:12Z",
          "updatedAt": "2025-04-24T08:15:12Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "We could do it by draft adoption, but I figured that was more difficult to track and risked blocking faster moving drafts on slower moving ones.\r\n\r\nI think this is of the right shape, but happy to discuss it in more detail in Madrid",
              "createdAt": "2025-04-24T08:15:12Z",
              "updatedAt": "2025-04-24T08:15:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOGIUVps6Tf85O",
      "title": "Add an example to illustrate the frame format and its support for reordering",
      "url": "https://github.com/wcsmith/draft-quic-receive-ts/pull/18",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Add an example to illustrate the frame format and its support for reordering\r\n- Define Receive Timestamps which was missing",
      "createdAt": "2025-04-22T21:52:10Z",
      "updatedAt": "2025-04-25T17:31:14Z",
      "baseRepository": "wcsmith/draft-quic-receive-ts",
      "baseRefName": "main",
      "baseRefOid": "10354dbbb1edc6e2a37c7befc142f7ec35c84e89",
      "headRepository": "wcsmith/draft-quic-receive-ts",
      "headRefName": "jb_add_example",
      "headRefOid": "c78ca776b9d7d0ce00b9fc0572f0fd79a3161d25",
      "closedAt": "2025-04-25T17:31:13Z",
      "mergedAt": "2025-04-25T17:31:13Z",
      "mergedBy": "jbeshay",
      "mergeCommit": {
        "oid": "c9f780cf69b83ffef0bd0f88406c43d3869de1e3"
      },
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "body": "@ianswett PTAL I moved the normative language out of the examples as we discussed offline. \r\n\r\n",
          "createdAt": "2025-04-25T17:10:02Z",
          "updatedAt": "2025-04-25T17:10:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOGIUVps6mC6ZK",
          "commit": {
            "abbreviatedOid": "9aa13ab"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This looks great, but I'm hesitant to put normative language in examples.  I think the normative language you're adding seems reasonable, but I think it's better in the main doc.",
          "createdAt": "2025-04-23T02:21:05Z",
          "updatedAt": "2025-04-23T02:21:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOGIUVps6mlVWN",
          "commit": {
            "abbreviatedOid": "3d816e2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LG, but I'd like to encourage receivers to use the ability to report receive timestamps of out-of-order packets now that it's enabled by the wire format.",
          "createdAt": "2025-04-25T17:13:50Z",
          "updatedAt": "2025-04-25T17:14:54Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I think I'd rather \"It SHOULD report them in a single ACK frame.\"?  At least for most congestion controllers, it's a bit easier to have as much data at once.  And it's a bit smaller on the wire",
              "createdAt": "2025-04-25T17:13:50Z",
              "updatedAt": "2025-04-25T17:14:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6mlXI-",
          "commit": {
            "abbreviatedOid": "3d816e2"
          },
          "author": "jbeshay",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-25T17:17:50Z",
          "updatedAt": "2025-04-25T17:17:50Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Makes sense. I will make that change before merging.",
              "createdAt": "2025-04-25T17:17:50Z",
              "updatedAt": "2025-04-25T17:17:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOGIUVps6mldPe",
          "commit": {
            "abbreviatedOid": "c78ca77"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for the update, LG",
          "createdAt": "2025-04-25T17:30:00Z",
          "updatedAt": "2025-04-25T17:30:00Z",
          "comments": []
        }
      ]
    }
  ]
}